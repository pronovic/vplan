[build-system]
requires = ["poetry-core (>=2.0.0)", "poetry-dynamic-versioning (>=1.5.0,<2.0.0)"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
requires-poetry = ">=2.0.0"
packages = [ { include="vplan", from="src" } ]
include = [
   { path='Changelog', format='sdist' },
   { path='NOTICE', format='sdist' },
   { path='LICENSE', format='sdist' },
   { path='README.md', format='sdist' },
   { path='tests', format='sdist' },
]
classifiers = [
   "Operating System :: Unix",
   "Environment :: Console",
   "Environment :: No Input/Output (Daemon)",
   "Intended Audience :: Developers",
   "Natural Language :: English",
   "Topic :: Home Automation",
]
version = "0.0.0"  # published version is managed using Git tags (see below)

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version=">=1.5.0,<2.0.0", extras=["plugin"] }

# Published version is managed using Git tags
# We get either the tag (like "0.24.1") or a snapshot-type version (like "0.24.1+3.e8319c4")
[tool.poetry-dynamic-versioning]
enable = true
pattern = '^[vV](?P<base>\d+\.\d+\.\d+)'  # this extracts the version from our vX.Y.Z tag format
format-jinja = "{% if distance == 0 and not dirty %}{{ base }}{% else %}{{ base }}+{{ distance }}.{{ commit }}{% endif %}"

[project]
name = "vplan"
requires-python = ">=3.10,<4"
description = "Vacation plan manager service for SmartThings"
authors = [ { name="Kenneth J. Pronovici", email="pronovic@ieee.org" } ]
license = "Apache-2.0"
readme = "README.md"
dynamic = [ "classifiers", "version" ]
dependencies = [
   "fastapi (>=0.103.2,<1.0.0)",
   "uvicorn (>=0.23.2,<1.0.0)",
   "pydantic (>=2.9.2,<3.0.0)",
   "pydantic-yaml (>=1.3.0,<2.0.0)",
   "semver (>=3.0.2,<4.0.0)",
   "click (>=8.1.7,<9.0.0)",
   "requests (>=2.32.3,<3.0.0)",
   "requests-unixsocket2 (>=0.4.2,<0.5.0)",
   "pytz (>=2023.3.post1)",
   "SQLAlchemy (>=2.0.36,<3.0.0)",
   "APScheduler (>=3.10.4,<4.0.0)",
   "python-dotenv (>=1.0.0,<2.0.0)",
   "tenacity (>=9.0.0,<10.0.0)",
   "pyyaml (>=6.0.1,<7.0.0)",
]

[project.urls]
homepage = "https://github.com/pronovic/vplan"
repository = "https://github.com/pronovic/vplan"

[tool.poetry.group.dev.dependencies]
pytest = ">=8.0.2,<9.0.0"
pytest-testdox = ">=3.1.0,<4.0.0"
coverage = ">=7.4.4,<8.0.0"
pylint = ">=3.0.1,<4.0.0"
pre-commit = ">=4.0.1,<5.0.0"
black = ">=24.2.0,<25.0.0"
mypy = ">=1.6.0,<2.0.0"
isort = ">=5.12.0,<6.0.0"
colorama = ">=0.4.6,<1.0.0"
pytest-asyncio = ">=0.21.1,<1.0.0"
toml = ">=0.10.2,<1.0.0"
tzlocal = ">=5.1,<6"
busypie = ">=0.5.1,<1.0.0"
sqlalchemy2-stubs = ">=0.0.2a35,<1.0.0"
types-requests = ">=2.31.0.8,<3.0.0"
types-pytz = ">=2023.3.1.1"
httpx = ">=0.25.0,<1.0.0"
responses = ">=0.23.0,<1.0.0"
types-pyyaml = ">=6.0.12.12,<7.0.0.0"
waitress = ">=3.0.0,<4.0.0"
types-waitress = ">=3.0.0,<4.0.0"

[tool.poetry.scripts]
vplan = "vplan.client.cli:vplan"

[tool.black]
line-length = 132
target-version = [ 'py310', 'py311', 'py312', 'py313' ]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | __pycache__
  | \.tox
  | \.venv
  | \.poetry
  | build
  | dist
  | docs
  | notes
)/
'''

[tool.isort]
profile = "black"
line_length = 132
skip_glob = [ "docs", "notes", ".poetry" ]

[tool.coverage.paths]
source = [ "src" ]

[tool.coverage.run]
branch = true
source = [ "src/vplan" ]

[tool.coverage.report]
show_missing = false
precision = 1

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
   'error',  # turn all Python warnings into test failures, so they're hard to miss
   'ignore:.*pkg_resources is deprecated as an API', # not sure where this is coming from, but we don't use it directly
   "ignore:.*The 'app' shortcut is now deprecated",  # not sure where this is coming from, but we don't use it directly
   'ignore:.*unclosed database', # seems to be a false positive due to mocking in unit tests
]

[tool.mypy]
# Settings are mostly equivalent to strict=true as of v1.14.1
pretty = true
show_absolute_path = true
show_column_numbers = true
show_error_codes = true
files = [ "src/vplan", "tests" ]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = false
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_no_return = true
warn_unused_configs = true
warn_unused_ignores = true

# It's hard to make tests compliant using unittest.mock
[[tool.mypy.overrides]]
module = "tests.*"
check_untyped_defs = false
allow_untyped_defs = true

# There is no type hinting for pytest
[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

# There is no type hinting for these modules
[[tool.mypy.overrides]]
module = [ "ruamel", "apscheduler.*", "busypie", "tzlocal", "sqlalchemy_json" ]
ignore_missing_imports = true
