#!/bin/bash
# Shortcuts for common developer tasks

# Setup the virtual environment via Poetry and install pre-commit hooks
run_install() {

   # Create and update the virtualenv
   poetry install -v
   if [ $? != 0 ]; then
      exit 1
   fi

   # Upgrade embedded packages within the virtualenv
   # Safety will alert on these even though they aren't technically dependencies
   # This command sometimes returns $?=1 on Windows, even though it succeeds <sigh>
   poetry run pip install --quiet --upgrade pip wheel setuptools 2>/dev/null

   # Install the pre-commit hooks
   poetry run pre-commit install 
   if [ $? != 0 ]; then
      exit 1
   fi

}

# Activate the current Poetry virtual environment
run_activate() {
   echo "source "$(dirname $(poetry run which python) 2>/dev/null)/activate""
}

# Run the Pylint code checker
run_pylint() {
   echo "Running pylint checks..."

   poetry run which pylint > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run pylint -j 0 src/vplan tests
   if [ $? != 0 ]; then
      exit 1
   fi

   echo "done"
}

# Run the MyPy code checker
run_mypy() {
   echo "Running mypy checks..."

   poetry run which mypy > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run mypy
   if [ $? != 0 ]; then
      exit 1
   fi

   echo "done"
}

# Run the Safety code checker
run_safety() {
   echo "Running safety checks..."

   poetry run which safety > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run safety check $*
   if [ $? != 0 ]; then
      exit 1
   fi

   echo "done"
}

# Run the black code formatter
run_black() {
   echo "Running black formatter..."

   poetry run which black > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run black $* .
   if [ $? != 0 ]; then
      exit 1
   fi

   echo "done"
}

# Run the isort import formatter
run_isort() {
   echo "Running isort formatter..."

   poetry run which isort > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run isort $* .
   if [ $? != 0 ]; then
      exit 1
   fi

   echo "done"
}

# Run the unit tests, optionally with coverage
run_pytest() {
   coverage="no"
   html="no"

   while getopts ":ch" option; do
     case $option in
       c) 
         coverage="yes"
         ;;
       h) 
         html="yes"
         ;;
       ?) 
         echo "invalid option -$OPTARG"
         exit 1
         ;;
     esac
   done

   poetry run which pytest > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   if [ $coverage == "yes" ]; then
      poetry run coverage run -m pytest --testdox tests
      if [ $? != 0 ]; then
         exit 1
      fi

      poetry run coverage report
      if [ $html == "yes" ]; then
         poetry run coverage html -d .htmlcov
         $(which start || which open) .htmlcov/index.html 2>/dev/null  # start on Windows, open on MacOS and Debian (post-bullseye)
      fi
   else
      poetry run pytest --testdox tests
      if [ $? != 0 ]; then
         exit 1
      fi
   fi
}

# Run the broader Tox test suite used by the GitHub CI action
run_tox() {
   poetry run which tox > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run tox -c .toxrc -e "checks,coverage"
   if [ $? != 0 ]; then
      exit 1
   fi
}

# Run the vplan REST server at localhost:8080
run_server() {
   poetry run which uvicorn > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run uvicorn vplan.engine.server:API \
      --port 8080 \
      --app-dir src --reload \
      --log-config config/local/vplan/server/logging.yaml \
      --env-file config/local/vplan/server/server.env
}

# Run the vplan client against localhost:8080
run_client() {
   poetry run vplan --config config/local/vplan/client/application.yaml $*
}

# Execute one of the developer tasks
case $1 in
   install|setup)
      run_install
      ;;
   activate)
      run_activate
      ;;
   black)
      run_black
      ;;
   isort)
      run_isort
      ;;
   safety)
      run_safety
      ;;
   *lint)
      run_pylint
      ;;
   mypy)
      run_mypy
      ;;
   format)
      run_black
      echo ""
      run_isort
      ;;
   check*)
      run_black --check
      echo ""
      run_isort --check-only
      echo ""
      run_safety --bare
      echo ""
      run_mypy
      echo ""
      run_pylint
      ;;
   pytest|test*)
      shift 1
      run_pytest $*
      ;;
   tox)
      run_tox
      ;;
   server)
      run_server
      ;;
   vplan|client)
      shift 1
      run_client $*
      ;;
   *)
      echo ""
      echo "------------------------------------"
      echo "Shortcuts for common developer tasks"
      echo "------------------------------------"
      echo ""
      echo "Usage: run <command>"  
      echo ""
      echo "- run install: Setup the virtualenv via Poetry and install pre-commit hooks"
      echo "- run activate: Print command needed to activate the Poetry virtualenv"
      echo "- run format: Run the code formatters"
      echo "- run checks: Run the code checkers"
      echo "- run test: Run the unit tests"
      echo "- run test -c: Run the unit tests with coverage"
      echo "- run test -ch: Run the unit tests with coverage and open the HTML report"
      echo "- run tox: Run the Tox test suite used by the GitHub CI action"
      echo "- run server: Run the vplan REST server at localhost:8080"
      echo "- run vplan: Run the vplan client against localhost:8080"
      echo ""
      exit 1
esac
